#utilizando o azurite para trabalhar com o azure function
#documentação: 

import azure.functions as func
from azure.keyvault.secrets import SecretClient
from azure.storage.blob import BlobServiceClient
from azure.identity import DefaultAzureCredential, CredentialUnavailableError
from io import StringIO
import polars as pl
import logging
import os
import csv
import duckdb
from datetime import datetime, timezone
from dotenv import load_dotenv


```storage_acount_key = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
storage_account_name = "devstoreaccount1"
connection_string = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;"
container_raw = "csv"
container_bronze = "bronze"

blob_service_client = BlobServiceClient.from_connection_string(connection_string)
container_client = blob_service_client.get_container_client(container_raw)
#file_name = container_client.get_blob_client(blob="ncr_ride_bookings.csv") - 
# Esse é se eu quiser o arquivo específico e sei qual é

blob_list = container_client.list_blobs() # lista os blobs que estão no container
for blob_i in blob_list: # para listar os blobs, coloco o list_blobs no objeto instanciado
    print("<<Blob name>>: ", {blob_i.name}) # blob_i.name é o nome do arquivo que está no container


logging.info('< 1º > Instanciado o Azure Storage : %s', {blob_service_client})
logging.info('< 2º > Instanciado a conexão com o container: %s' , {container_client})

file_name = container_client.get_blob_client(blob="netflix_titles.csv") 
logging.info('< 3º > Arquivo que estou acessando: %s' , {file_name})

blob_dowload = file_name.download_blob().readall().decode('utf-8')
logging.info('<****** 4º ****** > Download do arquivo ')

string_io_content = StringIO(blob_dowload)```
